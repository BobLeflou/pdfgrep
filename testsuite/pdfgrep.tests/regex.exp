set test "Match line after double match"

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

clear_pdfdir
set pdf [mkpdf regex {
    foofoo\\
    foo test
}]

pdfgrep_expect foo $pdf \
"foofoo
foo test"

set test "Match line after double match -- fixed string"

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

pdfgrep_expect -F foo $pdf \
"foofoo
foo test"

set test "Match line after double match -- PCRE"

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

set requires_pcre_support true

pdfgrep_expect -P foo $pdf \
"foofoo
foo test"

######################################################################

# This behaviour of repeating the same line over and over again is clearly not
# optimal, but it's better than an infinite loop!

set test "Empty pattern"

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

set empty [mkpdf empty {
    abc
}]

set timeout 2
pdfgrep_expect "" $empty \
"abc"

set test "Empty pattern -- fixed string"

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

set timeout 2
pdfgrep_expect -F "" $empty \
"abc"

set test "Empty pattern -- PCRE"

set requires_pcre_support true

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

set timeout 2
pdfgrep_expect -P "" $empty \
"abc"

######################################################################

set test "Case insensitive search"

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

clear_pdfdir
set pdf [mkpdf icase "FoObAr"]

pdfgrep_expect -i "foobar" $pdf \
    "FoObAr"


set test "Case insensitive search -- fixed string"

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

clear_pdfdir
set pdf [mkpdf icase "FoObAr"]

pdfgrep_expect -Fi "foobar" $pdf \
    "FoObAr"


set test "Case insensitive search -- PCRE"

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

set requires_pcre_support true

clear_pdfdir
set pdf [mkpdf icase "FoObAr"]

pdfgrep_expect -Pi "foobar" $pdf \
    "FoObAr"

######################################################################

set test "Multiple fixed strings"

clear_pdfdir
set pdf [mkpdf lines {
    line one\\
    line two\\
    line three
}]

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

pdfgrep_expect -F "one\ntwo\nthree" $pdf \
"line one
line two
line three"

######################################################################

set test "Multiple fixed strings in wrong order"

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

set multifixed [mkpdf multifixed {
    one two
}]

pdfgrep_expect -o -F "two\none" $multifixed \
"one
two"

######################################################################

# Not sure if this should be the expected behavior.
#
# The feature to match multiline strings is often being requested, though

set test "Multiline with PCRE"

# See poppler bug 91644
# https://bugs.freedesktop.org/show_bug.cgi?id=91644
set required_poppler_version {0 36 0}

set requires_pcre_support true

set multiline [mkpdf multiline {
    line one\\
    line two
}]

pdfgrep_expect -P "one\nline" $multiline \
"line one
line two"

######################################################################

set test "Empty page"

clear_pdfdir
set pdf [mkpdf empty {
page1\\\\
still page 1
\newpage\mbox{}\newpage
page2
}]

pdfgrep_expect -n "^$" $pdf \
    "2:"

######################################################################

set test "Empty page -- PCRE"

set requires_pcre_support true

pdfgrep_expect -P -n "^$" $pdf \
    "2:"

######################################################################

set test "Page beginning is actually page beginning"

pdfgrep_expect -n --only-match "p|^age" $pdf \
"1:p
1:p
3:p"

######################################################################

set test "Page beginning is actually page beginning -- PCRE"

set requires_pcre_support true

pdfgrep_expect -P -n --only-match "p|^age" $pdf \
"1:p
1:p
3:p"
